name: Reusable Runner

on:
  workflow_call:
    inputs:
      npm_script:
        description: "Command to run tests"
        required: true
        type: string
      node_version_file:
        description: "Path to .nvmrc"
        required: false
        default: ".nvmrc"
        type: string
      infra_enabled:
        description: "Bring infra up/down around the run"
        required: false
        default: true
        type: boolean
      artifact_suffix:
        description: "Suffix to append to artifact names"
        required: false
        default: ""
        type: string
      compose_profiles:
        description: "Docker Compose profiles to enable (e.g. firefox, edge, smoke)"
        required: false
        default: ""
        type: string
      grid_browsers:
        description: "Comma-separated browsers to wait for in Grid (chrome,firefox,edge)"
        required: false
        default: ""
        type: string

jobs:
  run-suite:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      TEST_USER_EMAIL_1: ${{ secrets.TEST_USER_EMAIL_1 }}
      TEST_USER_PASSWORD_1: ${{ secrets.TEST_USER_PASSWORD_1 }}
      TEST_USER_EMAIL_2: ${{ secrets.TEST_USER_EMAIL_2 }}
      TEST_USER_PASSWORD_2: ${{ secrets.TEST_USER_PASSWORD_2 }}
      TEST_USER_EMAIL_3: ${{ secrets.TEST_USER_EMAIL_3 }}
      TEST_USER_PASSWORD_3: ${{ secrets.TEST_USER_PASSWORD_3 }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v5

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ inputs.node_version_file }}

      - name: 🧰 Setup pnpm
        run: npm install -g pnpm@10.13.1

      - name: 🗃️ Cache pnpm package store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: ⚙️ Install dependencies
        run: pnpm install

      - name: 🐳 Infra up (Docker Compose)
        if: ${{ inputs.infra_enabled }}
        env:
          COMPOSE_PROFILES: ${{ inputs.compose_profiles }}
        run: pnpm infra:up

      - name: ⏳ Wait for Infra readiness
        if: ${{ inputs.infra_enabled }}
        shell: bash
        run: |
          set -euo pipefail

          # Make sure jq is available (it usually is, but be safe)
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

          # 1) Wait for hub ready (max ~120s)
          for i in {1..60}; do
            READY=$(pnpm -s infra:status || true)
            if [[ "$READY" == "true" ]]; then
              echo "Hub is ready"
              break
            fi
            echo "Hub not ready yet... ($i/60)"
            sleep 2
          done

          if [[ "$READY" != "true" ]]; then
            echo "Hub failed to become ready in time" >&2
            exit 1
          fi

          # 2) Optionally wait for requested browsers (max ~120s each)
          if [[ -n "${{ inputs.grid_browsers }}" ]]; then
            IFS=',' read -ra REQ <<< "${{ inputs.grid_browsers }}"
            map_to_selenium() {
              local b="$(echo "$1" | tr '[:upper:]' '[:lower:]' | xargs)"
              case "$b" in
                edge|microsoftedge|msedge) echo "MicrosoftEdge" ;;
                firefox|ff)                echo "firefox" ;;
                chrome|chromium)           echo "chrome" ;;
                *)                         echo "" ;;
              esac
            }
            for b in "${REQ[@]}"; do
              want="$(map_to_selenium "$b")"
              if [[ -z "$want" ]]; then
                echo "Skipping unknown browser token: '$b'"
                continue
              fi
              echo "Waiting for Grid node(s) for: $want"
              for i in {1..60}; do
                # Look for any slot with this browserName
                found=$(
                  curl -s http://localhost:4444/se/grid/distributor/status \
                  | jq -r --arg W "$want" '
                      [ .nodes[].slots[].stereotype.browserName
                        | select(. != null)
                        | ascii_downcase
                      ]
                      | map(. == ($W | ascii_downcase))
                      | any
                    '
                )
                if [[ "$found" == "true" ]]; then
                  echo "Found node for $want"
                  break
                fi
                echo "Node for $want not registered yet... ($i/60)"
                sleep 2
              done
              if [[ "$found" != "true" ]]; then
                echo "Timed out waiting for $want node registration" >&2
                exit 1
              fi
            done
          fi

      - name: ✨ Ensure Allure CLI
        run: pnpm exec allure --version || true

      - name: 🧪 Run Tests
        env:
          CI: true
          FORCE_COLOR: "3"
        run: ${{ inputs.npm_script }}

      - name: 📊 Generate Allure HTML
        if: ${{ always() }}
        run: pnpm exec allure generate allure-results --clean -o allure-report || echo "No allure results"

      - name: 📎 Upload Allure artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: allure${{ inputs.artifact_suffix }}
          path: |
            allure-results/**
            allure-report/**
          if-no-files-found: warn
          retention-days: 14

      - name: 📸 Upload screenshots (on failure)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: screenshots${{ inputs.artifact_suffix }}
          path: reports/screenshots/**
          if-no-files-found: ignore
          retention-days: 7

      - name: 📎 Upload JUnit (on failure)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: junit-xml${{ inputs.artifact_suffix }}
          path: reports/junit/**
          if-no-files-found: ignore
          retention-days: 14

      - name: 🧹 Infra down (cleanup)
        if: ${{ always() && inputs.infra_enabled }}
        run: pnpm infra:down
